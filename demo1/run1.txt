/TEXT /Local/Sys/PassWord/@wiki/0

/# Limitation: Only gold is supported now.
/set pw:super:super gold 90
/set pw:foo:bar gold 70
/set pw:*:xyzzy gold 30
/set pw:*:* gold 10

/TEXT /Root/Sys/ServeSite/@wiki/0

/set serve:localhost:8080 site Local
/set serve:127.0.0.1:8080 site Local
#future# /set serve:localhost:8081 site Larp

/TEXT /Local/Main/HomePage/@wiki/0

This is the HomePage.

/TEXT /Root/Mixin/MixinFirst/@wiki/0

proc HtmlOutput {} { ht tag html [ht cat [HtmlHead] [HtmlBody] [WikiTail]] }
proc HtmlHead {} { ht tag head [ht cat [HtmlTitle] [HtmlCss]] }
proc HtmlTitle {} { ht tag title [ht cat $Volume -- $Page -- $Verb] }
proc HtmlCss {} { ht cat }
proc HtmlBody {} { ht tag body class HtmlBody [ht cat [
	ht tag div class WikiTop [WikiTop]] [
	ht tag div class middle [middle]] [
	ht tag div class WikiBottom [WikiBottom]]
]}

proc WikiTop {} { ht cat [WideTable [list [list "TOP"]]] [ht tag br] [ht tag br] }
proc middle {} { ht cat "This is the middle; override me!" }
proc WikiBottom {} { ht cat [ht tag br] [ht tag br] [WideTable [list [list "BOTTOM"]]] }
proc WikiTail {} { ht tag div class WikiTail [WikiNotes] }

proc WikiText {} { ReadFile [site] $Volume $Page @wiki }

proc WideTable rows {
	set rr {}
	foreach row $rows {
		set dd {}
		foreach d $row {
			lappend dd [ht tag td align left $d]
		}
		lappend rr [ht tag tr [eval ht cat $dd]]
	}
	ht tag table width 99% border 1 cellpadding 5 [eval ht cat $rr]
}
set Notes {}
proc Note x {
	lappend Notes $x
}
proc WikiNotes {} {
	set nn {}
	foreach n $Notes {
		lappend nn [ht tag li class WikiNote $n]
	}
	ht tag ul class WikiNotes [eval ht cat $nn]
}
			
set WikiPage_rx [RxCompile {^([A-Z]+[a-z]+[A-Z][A-Za-z0-9_]*)$}]

#proc try {args} { # BROKEN -- TODO --
#	set z ""
#	catch {set z [uplevel 1 [list $args]]} _
#	set z
#}

proc Route { path query } {
	#ParseForm

	set Query [cred query]
	set Form [cred form]

	ModeHtml

	if {$path eq "/"} {
		TemporaryRedirect /Main/HomePage.view
		return
	}

	if {$path eq "/favicon.ico"} {
		# Leave quietly, without lots of errors.
		return
	}

	if {[set e [catch {

		set rx [RxCompile {^/([A-Z]+[a-z0-9]*)/([A-Z]+[a-z]+[A-Z][A-Za-z0-9_]*)([.]([a-z_]+))?$}]
		set m [FindStringSubmatch $rx $path]
		if {[notnull $m]} {
			set _,Volume,Page,_,Verb $m
			catch { Note "Method: [cred method]" } _
			catch { Note "Query: [ShowValue $Query]" } _
			catch { Note "Form: [ShowValue $Form]" } _
			catch { Note "Level: [level]" } _
			catch { Note "Host: [host]" } _
			catch { Note "Site: [site]" } _
			catch { Note "User: [user]" } _
			catch { Note "Vol: $Volume" } _
			catch { Note "Page: $Page" } _
			catch { Note "Verb: $Verb" } _
			Note [ht tag a href /Main/HomePage.list LIST]
			Note [ht tag a href /Main/HomePage.view HomePage]
			Note [ht tag a href /Main/HomePage.e "Database Demo"]

			Verb/$Verb
		} else {
			Puts [ht tag pre "Did not understand the path!  <$path>"]
		}

	} what]]} {
		if {$e < 5} {
			Puts [ht tag pre "*** ($e) Caught an error:\n$what"]
		} else {
			# Rethrow exotic codes.
			throw $e $what
		}
	}
}

proc Verb/view {} {
	proc WikiTopInner {} {
			ht cat [ht tag b "$Page"] " . . . " [
				ht tag a href $Page.edit EDIT] " . . . " [
				ht tag a href $Page.attach ATTACH]
	}
	proc WikiTop {} { ht cat [WideTable [list [list [WikiTopInner]]]] [ht tag br] [ht tag br] }
	proc middle {} { ht tag listing [WikiText] }

	Puts [HtmlOutput]
}

proc DoVerbList {} {
	set zz {}
	foreach p [ListPages [site] $Volume] {
		set m [FindStringSubmatch $WikiPage_rx $p]
		if {[notnull $m]} {
			set _,page $m
			lappend zz [ht tag li [ht tag a href $page.view $page]]
		}
	}
	foreach p [ListPages [site] Entity] {
		set m [FindStringSubmatch $WikiPage_rx $p]
		if {[notnull $m]} {
			set _,page $m
			lappend zz [ht tag li [ht tag a href /Entity/$page.view $page]]
		}
	}
	ht tag ul [eval ht cat $zz]
}

proc Verb/list {} {
	proc middle {} {
		DoVerbList
	}

	Puts [HtmlOutput]
}

proc ulist list {
	set v {}
	foreach e $list {
		lappend v [ht tag {li} $e]
	}
	ht tag {ul} [
		eval ht cat $v
	]
}

proc Verb/zork {} {
	# To test debugging, cause an error.
	set cond 1
	set bogus zork
	if $cond { list ; $bogus; list }
}
proc Verb/submit_attach {} {
	foreach {name filename,contents} [cred uploads] {
		WriteFile [site] $Volume $Page $filename $contents
	}
	TemporaryRedirect /$Volume/$Page.attach
}

proc Verb/attach {} {
	proc middle {} {
		set files [ListFiles [site] $Volume $Page]

		ht tag {form} method "POST" action "/$Volume/$Page.submit_attach" enctype "multipart/form-data" [
			ht cat [
				ht tag {h2} "ATTACHMENTS FOR /$Volume/$Page"
			] [
				ulist $files
			] [
				ht tag {input} type "file" name "filestuff"
			] [
				ht tag {input} type "submit" value "Upload"
			] [
				ht tag {input} type reset
			] [
				ht tag {a} href "/$Volume/$Page.view" Cancel
			]
        ]
	}
	Puts [HtmlOutput]
}

proc Verb/edit {} {
	set content ""
	catch { set content [hget [cred form] "text"] } _

	if [string length $content] {
		WriteFile [site] $Volume $Page @wiki $content
		TemporaryRedirect /$Volume/$Page.view
		return
	}

	proc middle {} {
		set c [ReadFile [site] $Volume $Page @wiki]

		ht tag form method POST action /$Volume/$Page.edit [
			ht cat [
				ht tag textarea name text wrap virtual rows 40 cols 100 style "width: 95%; height: 80%;" $c
			] [
				ht tag br
			] [
				ht tag input type submit value Save
			] [
				ht tag input type reset
			] [
				ht tag a href /$Volume/$Page.view Cancel
			]
        ]
	}
	Puts [HtmlOutput]
}

proc Verb/db {} {
	foreach e [EntityLike [site] Characters * * *] {
	  foreach field,tag,values [EntityTriples [site] Characters $e * * *] {
	    foreach value $values {
			Puts "Entity:$e Field:$field Tag:$tag Value:=$value <br>"  ; # Not properly escaped!
		}
		Puts "<br>"
	  }
	}
}

proc HtList list { # Make HTML Unordered Lists from Tcl list
	set z {}
	foreach item $list {
		lappend z [ht tag li $item]
	}
	ht tag ul [eval ht cat $z]
}

proc Verb/e {} {
	proc middle {} {
		ht cat [
			ht tag h3 "All Entities:"
		] [
			HtList [EntityLike [site] Characters * * *]
		] [
			ht tag h3 "Their Player Names:"
		] [
			set ents [EntityLike [site] Characters * * *]
			set lines {}
			foreach e $ents {
				set name [join [EntityGet [site] Characters $e player_name ""] "; "]
				lappend lines "Entity <$e> has player name <$name>"
			}
			HtList $lines
		] [
			ht tag h3 "Changing Their Names (broken still):"
		] [
			set ents [EntityLike [site] Characters * * *]
			set lines {}
			foreach e $ents {
				EntityPut [site] Characters $e player_name "" "Cedric $e Diggery"
				set name [join [EntityGet [site] Characters $e player_name ""] "; "]
				lappend lines "Entity <$e> has player name <$name>"
			}
			HtList $lines
		] [
			ht tag h3 "Characters of Definite Value (i.e. value begins with word 'The')"
		] [
			set ents [EntityLike [site] Characters * * The*]
			set lines {}
			foreach e $ents {
				foreach triple [EntityTriples [site] Characters $e * * The*] {
					set field,tag,values $triple

					set name [join [EntityGet [site] Characters $e player_name ""] "; "]

					lappend lines "ID: $e -- Name: $name -- Field: $field -- Tag: $tag -- Values: [join $values ", "]"
				}
			}
			HtList $lines
		] [
			ht tag h3 "Characters of Unity (i.e. value is 1)"
		] [
			set ents [EntityLike [site] Characters * * 1]
			set lines {}
			foreach e $ents {
				foreach triple [EntityTriples [site] Characters $e * * 1] {
					set field,tag,values $triple

					set name [join [EntityGet [site] Characters $e player_name ""] "; "]

					lappend lines "ID: $e -- Name: $name -- Field: $field -- Tag: $tag -- Values: [join $values ", "]"
				}
			}
			HtList $lines
		]


	}
	Puts [HtmlOutput]

	Puts "<br><h3>All Database Records:</h3><br>"
	Verb/db
}


#future# /TEXT /Larp/Main/HomePage/@wiki/0

#future# This is the Larp HomePage.

/TEXT /Local/Entity/TableCharacters_OlSmithy/@wiki/0

/set player_name:    {John Henry}
/set character_name: {Ol Smithy}
/set points:total    317
/set points:spent    315
/set points:unspent  2
/set home_world:     {Empire of Perfect Unity}
/set prowess:        4
/set mastery:        0

# Traits
/set trait_level:tough      1
/set trait_level:learned    1
/set trait_level:perceptive 1
/set trait_level:strong     1

# Skill: Craft
/set skill_level:craft       8
/set skill_specialties:craft {Weaponcraft x3}
/set skill_abilities:craft   {Spark of Creation} {Signature Work: Longsword}

# Skill: Scholarship
/set skill_level:scholarship       7
/set skill_specialties:scholarship Swords {World Striders}
/set skill_abilities:scholarship   Epiphany

# Skill: Sword
/set skill_level:sword 3

# Here's how I imagine the data for this character would be represented in JSON

{
  "player_name": "John Henry",
  "character_name": "Ol Smithy",
  "points": {
    "total": 317,
    "spent": 315,
    "unspent": 2
  },
  "home_world": "Empire of Perfect Unity",
  "traits": [
    { "name": "Tough", "level": 1 },
    { "name": "Learned", "level": 1 },
    { "name": "Perceptive", "level": 1 },
    { "name": "Strong", "level": 1 }
  ],
  "skills": [
    {
      "name": "Craft",
      "level": 8,
      "specialties": ["Weaponcraft x3"],
      "abilities": ["Spark of Creation", "Signature Work: Longsword"]
    },
    {
      "name": "Scholarship",
      "level": 7,
      "specialties": ["Swords", "World Striders"],
      "abilities": "Epiphany"
    },
    {
      "name": "Sword",
      "level": 3
    }
  ]
}

/TEXT /Local/Entity/TableCharacters_Marina/@wiki/0

/set player_name:    {Janet Snufflepuff}
/set character_name: {Marina}
/set points:total    255
/set points:spent    230
/set points:unspent  25
/set home_world:     {Enchanted Glade}
/set prowess:        0
/set mastery:        11

# Traits
/set trait_level:willful  1
/set trait_level:attuned  2
/set trait_level:empathic 1

# Skills
/set skill_level:occult      3
/set skill_level:healing     1
/set skill_level:performance 1

# Magic School: Woodsong and Moonsecret
/set school_level:woodsong_and_moonsecret            8
/set school_abilities:woodsong_and_moonsecret        {Empowered Spell} {Greater Working}
/set school_greater_workings:woodsong_and_moonsecret {Marina Steals the Weight of Years}
/set school_spells:woodsong_and_moonsecret           {Ring of the Fair Ones} {Glasswing's Gentle Mien} {Secrets Under Toadstools} {Call the Clutching Weeds} {Stillthorn Curse} {Joy Takes Flight}
/set school_empowered_spells:woodsong_and_moonsecret {Glasswing's Gentle Mien}
/set school_rituals:woodsong_and_moonsecret          {Feet of the Greenwise} {Sleep of the Ageless} {Name the Little One} {Likeness in Clay} {Cleansing Sunlit Waters} {Ply the Stones}

# Magic School: Currents of Deepspirit
/set school_level:currents_of_deepspirit   3
/set school_spells:currents_of_deepspirit  {Bearing Unseen Gifts} {Balance, in All Things} {Know The Spirit Ways}
/set school_rituals:currents_of_deepspirit {The City is Life} {Drawing the Third Eye} {The Sound that Pleases}

# Here's how I imagine the data for this character would be represented in JSON

{

  "player_name": "Janet Snufflepuff",
  "character_name": "Marina",
  "points": {
    "total": 255,
    "spent": 230,
    "unspent": 25
  },
  "home_world": "Enchanted Glade",
  "traits": [
    { "name": "Willful", "level": 1 },
    { "name": "Attuned", "level": 2 },
    { "name": "Empathic", "level": 1 }
  ],
  "skills": [
    { "name": "Occult", "level": 3 },
    { "name": "Healing", "level": 1 },
    { "name": "Performance", "level": 1 }
  ],
  "magic_schools": [
    {
      "name": "Woodsong and Moonsecret",
      "level": 8,
      "abilities": [ "Empowered Spell", "Greater Working" ],
      "greater_workings": [ "Marina Steals the Weight of Years" ],
      "spells": [
        { "name": "Ring of the Fair Ones" },
        { "name": "Glasswing's Gentle Mien", "empowered": true },
        { "name": "Secrets Under Toadstools" },
        { "name": "Call the Clutching Weeds" },
        { "name": "Stillthorn Curse" },
        { "name": "Joy Takes Flight" }
      ],
      "rituals": [
        { "name": "Feet of the Greenwise" },
        { "name": "Sleep of the Ageless" },
        { "name": "Name the Little One" },
        { "name": "Likeness in Clay" },
        { "name": "Cleansing Sunlit Waters" },
        { "name": "Ply the Stones" }
      ]
    },
    {
      "name": "Currents of Deepspirit",
      "level": 3,
      "spells": [
        { "name": "Bearing Unseen Gifts" },
        { "name": "Balance, in All Things" },
        { "name": "Know the Spirit Ways" }
      ],
      "rituals": [
        { "name": "The City is Life" },
        { "name": "Drawing the Third Eye" },
        { "name": "The Sound that Pleases" }
      ]
    }
  ]
}
